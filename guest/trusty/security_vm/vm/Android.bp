package {
    default_applicable_licenses: ["Android-Apache-2.0"],
}

prebuilt_etc {
    name: "lk_trusty.elf",
    system_ext_specific: true,
    relative_install_path: "vm/trusty_vm",
    filename: "lk_trusty.elf",
    arch: {
        x86_64: {
            src: ":trusty_security_vm_signed",
        },
        arm64: {
            src: ":security_vm_elf",
        },
    },
    src: ":empty_file",
}

cc_binary {
    name: "security_vm_elf",
    srcs: [
        ":security_vm_signed_obj",
    ],
    linker_scripts: [
        "security_vm_sections.ld",
    ],
    ldflags: [
        // Prevent the `trusty_security_vm_signed` segment from being garbage collected.
        "-Wl,--no-gc-sections",
        // Prevent the build ID segments from being added, as it would corrupt the integrity
        // of the original signed image.
        "-Wl,--build-id=none",
        // Use a standard page size of 4096, smaller than the default 16384, to avoid padding
        // with extra bytes.
        "-Wl,-z,max-page-size=4096",
    ],
    nocrt: true,
    no_libcrt: true,
    static_executable: true,
    system_shared_libs: [],
    enabled: false,
    target: {
        android_arm64: {
            enabled: true,
        },
    },
    strip: {
        none: true,
    },
}

cc_genrule {
    name: "security_vm.S",
    arch: {
        arm64: {
            srcs: [":trusty_security_vm_signed"],
        },
    },
    out: ["security_vm.S"],
    cmd: "(" +
        "    echo '.section .security_vm_signed.bin';" +
        "    echo '.globl security_vm_signed';" +
        "    echo 'security_vm_signed:';" +
        "    echo '.incbin \"'$(in)'\"';" +
        ") > $(out)",
    visibility: ["//visibility:private"],
}

cc_object {
    name: "security_vm_signed_obj",
    srcs: [
        ":security_vm.S",
    ],
    static_libs: ["trusty_security_vm_signed"],
    crt: false,
    system_shared_libs: [],
    enabled: false,
    target: {
        android_arm64: {
            enabled: true,
        },
    },
    visibility: ["//visibility:private"],
}

filegroup {
    name: "trusty_vm_sign_key",
    srcs: [":avb_testkey_rsa4096"],
}

// python -c "import hashlib; print(hashlib.sha256(b'trusty_security_vm_salt').hexdigest())"
trusty_security_vm_salt = "75a71e967c1a1e0f805cca20465e7acf83e6a04e567a67c426d8b5a94f8d61c5"

TRUSTY_SECURITY_VM_VERSION = 1

avb_add_hash_footer {
    name: "trusty_security_vm_signed",
    filename: "trusty_security_vm_signed",
    partition_name: "boot",
    private_key: ":trusty_vm_sign_key",
    salt: trusty_security_vm_salt,
    rollback_index: TRUSTY_SECURITY_VM_VERSION,
    props: [
        {
            name: "com.android.virt.cap",
            value: "trusty_security_vm",
        },
    ],
    src: ":empty_file",
    enabled: false,
    arch: {
        x86_64: {
            src: ":trusty-lk.elf",
            enabled: true,
        },
        arm64: {
            src: ":trusty_security_vm_unsigned",
            enabled: true,
        },
    },
}

// TODO(b/379646659): Take the binary generated by trusty instead of extracting
// it from ELF here.
raw_binary {
    name: "trusty_security_vm_unsigned",
    src: ":trusty-test-lk.elf",
    enabled: false,
    arch: {
        arm64: {
            enabled: true,
        },
    },
}
